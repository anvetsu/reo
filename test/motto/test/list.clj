(ns motto.test.list
  (:use [clojure.test]
        [motto.test.util]))

(deft take-test
  ["lift(2, [1 2 3 4])"     [1 2]
   "a:[10 20 30]"    'a
   "a"               [10 20 30]
   "lift(1 a + 100)"       [110]
   "lift(1 a - 100*20)"    [-1990]
   "lift(2 \"hello\")"     [\h \e]
   "lift(-2 \"hello\")"    [\l \o]
   "take_repeat(5 1)"    [1 1 1 1 1]
   "take_repeat(30 [1 5 0 0])"
   [1 5 0 0 1 5 0 0 1 5 0 0 1 5 0 0 1 5 0 0 1 5 0 0 1 5 0 0 1 5]])

(deft drop-test
  ["dip(2, [1 2 3 4])"     [3 4]
   "dip(-2, [1 2 3 4])"    [1 2]
   "dip(3 \"hello\")" [\l \o]])

(deft concat-test
  ["[1 2 3]#[4 5]" [1 2 3 4 5]
   "\"hello\"#\" world\"" "hello world"
   "\"hello\"#[1 2 3]" "hello[1 2 3]"])

(deft cons-test
  ["1;[2 3]"     [1 2 3]
   "[2 3];1"     [2 3 1]
   "1 + 10;[2 3]" [11 3 4]
   "1 + 10;til(3)" [11 1 2 3]])

(deft fold-test
  ["(+)@ [1 2 3 4 5]" 15
   "(+)@ 10;til(6)" 25
   "(*)@ 1+til(10)" 3628800
   "(*)@ take_repeat(2 1.4142135623730949)" 1.9999999999999996
   "(+)@[[4 8] [1 4] 10 [9 5]]" [24 27]
   "(+)@[[4 8] [1 4] [1 2 3] [9 5]]" [15 19]
   "n:5"            'n
   "(*)@ take_repeat(n 10)"      100000
   "big@ [20 10 30 40]" 40
   "sml@ [20 10 30 40]" 10
   "sum ([[1 2 3] [4 5 6]])" [5 7 9]
   "dif ([[1 2 3] [4 5 6]])" [-3 -3 -3]
   "prd ([[1 2 3] [4 5 6]])" [4 10 18]
   "qt ([[1 2 3] [4 5 6]])" [1/4 2/5 1/2]
   "mx([20 40 10 5])" 40
   "mn([20 40 10 5])" 5
   "sums (1+til(10))" [1 3 6 10 15 21 28 36 45 55]
   "prds (1+til(10))" [1 2 6 24 120 720 5040 40320 362880 3628800]
   "mxs ([20 10 40 30])" [20 20 40 40]
   "mns ([20 10 40 30])" [20 10 10 10]
   "(fn (x) x;sum(lift(-2 x)))@> 10 [1 1]" [1 1 2 3 5 8 13 21 34 55 89 144]
   "(fn (x) x*x)@> 5 3" 1853020188851841])

(deft fold-incr
  ["(+)@~ [1 2 3 4 5]" [1 3 6 10 15]
   "(+)@~ 10;til(6)" [10 10 11 13 16 20 25]])

(deft map-test
  ["(sq:fn(x) x*x) 10" 10
   "sq~ til(3)"        [0 1 4]])

(deft filter-test
  ["x:fn(x) x < 10" 'x
   "x! [100 20 3 90 4 1]" [3 4 1]])

(deft search-test
  ["xs:[15 40 63 18 27 40 33 29 40 88]" 'xs
   "where:[29 63 40 33 50]" 'where
   "(fn(i) pos(xs i))~where" [7 2 1 6 -1]])

(deft dig-test
  ["xs:[[41 26 38] [14 87 42] [30 28 19] [65 40 55] [19 31 64] [45 82 74]]" 'xs
   "dig(xs [3 2])" 55
   "dig(xs [[0 4 5] [0 2]])" [[41 38] [19 64] [45 74]]
   "dig(xs [[0 1 4 5] [0]])" [[41] [14] [19] [45]]])

(deft without-test
  ["xs:[[26 16 22] [17 21 44]]" 'xs
   "ys:[21 22 23 24 25 21 26 27]" 'ys
   "without(21 ys)" [22 23 24 25 26 27]
   "without(xs ys)" [23 24 25 27]])

(deft axis-test
  ["prod:[[[26 16 22 17 21 44 25 22 23 44 41 33]
  [43 36 47 49 30 22 57 20 45 60 43 22]]

 [[44 21 58 57 17 43 47 17 43 26 53 23]
  [29 19 23 38 53 47 38 22 40 57 35 26]]

 [[37 27 53 26 29 46 25 26 30 20 32 16]
  [56 55 25 47 38 27 39 59 20 28 42 25]]

 [[21 57 55 44 16 54 26 16 55 56 45 45]
  [16 55 26 20 27 55 36 39 43 38 50 16]]

 [[27 23 56 41 53 60 39 47 44 47 17 28]
  [24 35 61 26 22 35 24 20 31 35 47 37]]]" 'prod
   "sum(prod)"
   [[155 144 244 185 136 247 162 128 195 193 188 145]
    [168 200 182 180 170 186 194 160 179 218 217 126]]
   "sum~prod"
   [[69 52 69 66 51 66 82 42 68 104 84 55]
    [73 40 81 95 70 90 85 39 83 83 88 49]
    [93 82 78 73 67 73 64 85 50 48 74 41]
    [37 112 81 64 43 109 62 55 98 94 95 61]
    [51 58 117 67 75 95 63 67 75 82 64 65]]
   "(fn (xs) [sum(xs(0)) sum(xs(1))])~prod"
   [[334 474]
    [449 427]
    [367 461]
    [490 421]
    [482 397]]])
